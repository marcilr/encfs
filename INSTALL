INSTALL
Created Thu Apr 11 09:48:01 AKDT 2013
Copyright (C) 2013 by Raymond E. Marcil <marcilr@gmail.com>


Tue Jan 26 11:15:40 AKST 2016
=============================
Installation of EncFS om GCI Network Services, OSS covellite debian jessie
8.3 amd64 workstation:

1. Install EncFS on covellite:
# aptitude install encfs
The following NEW packages will be installed:
  encfs librlog5{a} 
0 packages upgraded, 2 newly installed, 0 to remove and 0 not upgraded.
Need to get 324 kB of archives. After unpacking 1,905 kB will be used.
Do you want to continue? [Y/n/?] Y

Package configuration
Encfs security informatio 
According to a security audit by Taylor Hornby (Defuse Security), the
current implementation of Encfs is vulnerable or potentially vulnerable
to multiple types of attacks.  For example, an attacker with read/write
access to encrypted data might lower the decryption complexity for
subsequently encrypted data without this being noticed by a legitimate
user, or might use timing analysis to deduce information.

Until these issues are resolved, encfs should not be considered a safe

click <OK>
...
Preconfiguring packages ...
Selecting previously unselected package librlog5.
(Reading database ... 285463 files and directories currently installed.)
Preparing to unpack .../librlog5_1.4-2.1_amd64.deb ...
Unpacking librlog5 (1.4-2.1) ...
Selecting previously unselected package encfs.
Preparing to unpack .../encfs_1.7.4-5_amd64.deb ...
Unpacking encfs (1.7.4-5) ...
Processing triggers for man-db (2.7.0.2-5) ...
Setting up librlog5 (1.4-2.1) ...
Setting up encfs (1.7.4-5) ...
Processing triggers for libc-bin (2.19-18+deb8u2) ...
                                         
#

Looks good.


2. Test EncFS:
svn $ cd ~/svn
svn $ mkdir gci-decrypted
svn $ cp -Rv gci/ gci-encrypted
svn $ encfs /home/marcilr/svn/gci-encrypted/ /home/marcilr/svn/gci-decrypted/
Creating new encrypted volume.
Please choose from one of the following options:
 enter "x" for expert configuration mode,
 enter "p" for pre-configured paranoia mode,
 anything else, or an empty line will select standard mode.
?> p

Paranoia configuration selected.

Configuration finished.  The filesystem to be created has
the following properties:
Filesystem cipher: "ssl/aes", version 3:0:2
Filename encoding: "nameio/block", version 3:0:1
Key Size: 256 bits
Block Size: 1024 bytes, including 8 byte MAC header
Each file contains 8 byte header with unique IV data.
Filenames encoded using IV chaining mode.
File data IV is chained to filename IV.
File holes passed through to ciphertext.

-------------------------- WARNING --------------------------
The external initialization-vector chaining option has been
enabled.  This option disables the use of hard links on the
filesystem. Without hard links, some programs may not work.
The programs 'mutt' and 'procmail' are known to fail.  For
more information, please see the encfs mailing list.
If you would like to choose another configuration setting,
please press CTRL-C now to abort and start over.

Now you will need to enter a password for your filesystem.
You will need to remember this password, as there is absolutely
no recovery mechanism.  However, the password can be changed
later using encfsctl.

New Encfs Password:
Verify Encfs Password:
svn $

NOTE: Full paths are required.

Did not appear to do anything.  Need to read prior use of EncFS info.


Thu Apr 11 09:48:01 AKDT 2013
=============================
Installation of EncFS lvm on bornite with use from malachite.

bornite:   Debian squeeze amd64 6.0.7
malachite: Debian squeeze amd64 6.0.7

1. On malachite install encfs and fuse-utils:
malachite:~# aptitude install encfs fuse-utils
The following NEW packages will be installed:
  encfs libboost-filesystem1.42.0{a} libboost-serialization1.42.0{a} \
  libboost-system1.42.0{a} librlog5{a} 
0 packages upgraded, 5 newly installed, 0 to remove and 0 not upgraded.
Need to get 754 kB of archives. After unpacking 3,265 kB will be used.
Do you want to continue? [Y/n/?] Y
...
Setting up libboost-system1.42.0 (1.42.0-4) ...
Setting up libboost-filesystem1.42.0 (1.42.0-4) ...
Setting up libboost-serialization1.42.0 (1.42.0-4) ...
Setting up librlog5 (1.4-1) ...
Setting up encfs (1.7.2-1) ...

malachite:~# 

NOTE: fuse-utils was already installed.

malachite:~# modprobe fuse

2. Since we don't want to modprobe each time we reboot, add "fuse" to
/etc/modules (without quotes, on a line of its own)

NOTE: This was already configured.

3. Add user to fuse group:
malachite:~# adduser <your username> fuse

NOTE: marcilr was already in fuse group:
malachite:~$ grep fuse /etc/group
fuse:x:112:marcilr
malachite:~$

4. Create 25GB /data/encrypted lvm on bornite.
see: 00STORAGE/lvm/volumes.txt

5. Create /usr/local/encrytped mount point on malachite:
malachite:~# /usr/local/encrypted
malachite:~# chown sshfs:sshfs /usr/local/encrypted
malachite:~# chmod 775 /usr/local/encrypted
malachite:~# chmod g+s /usr/local/encrypted

6. Add /usr/local/encrypted to /etc/fstab:66 on malachite:
sshfs#sshfs@10.1.0.65:/data/encrypted  /usr/local/encrypted fuse defaults,\
user,uid=1010,gid=1010,port=60143,IdentityFile=\
/home/sshfs/.ssh/rsa8192_openssh,noauto 0 0

7. Mount /use/local/encrypted/ on malachite:
malachite:~$ mount /usr/local/encrypted

malachite:~$ df -h | grep encrypted
sshfs@10.1.0.65:/data/encrypted
                       25G  173M   24G   1% /usr/local/encrypted
malachite:~$

Looks good.

8. Create mountpoint:
malachite:~$ mkdir decrypted
malachite:~$ chmod 700 decrypted/

9. Create the EncFS encrypted filesystem :
The first time you try to mount the directory, encfs will create the encrypted
filesystem.  It works like the regular mount: 

syntax: encfs <folder to mount> <mount point>

malachite:~$ encfs /usr/local/encrypted/ /home/marcilr/decrypted/
Creating new encrypted volume.
Please choose from one of the following options:
 enter "x" for expert configuration mode,
 enter "p" for pre-configured paranoia mode,
 anything else, or an empty line will select standard mode.
?> x

Manual configuration mode selected.
The following cipher algorithms are available:
1. AES : 16 byte block cipher
 -- Supports key lengths of 128 to 256 bits
 -- Supports block sizes of 64 to 4096 bytes
2. Blowfish : 8 byte block cipher
 -- Supports key lengths of 128 to 256 bits
 -- Supports block sizes of 64 to 4096 bytes

Enter the number corresponding to your choice: 1


Selected algorithm "AES"

Please select a key size in bits.  The cipher you have chosen
supports sizes from 128 to 256 bits in increments of 64 bits.
For example: 
128, 192, 256
Selected key size: 256

Select a block size in bytes.  The cipher you have chosen
supports sizes from 64 to 4096 bytes in increments of 16.
Or just hit enter for the default (1024 bytes)

filesystem block size: 1024


Using filesystem block size of 1024 bytes

The following filename encoding algorithms are available:
1. Block : Block encoding, hides file name size somewhat
2. Null : No encryption of filenames
3. Stream : Stream encoding, keeps filenames as short as possible

Enter the number corresponding to your choice: 1

Selected algorithm "Block""

Enable filename initialization vector chaining?
This makes filename encoding dependent on the complete path, 
rather then encoding each path element individually.
The default here is Yes.
Any response that does not begin with 'n' will mean Yes: n

Enable per-file initialization vectors?
This adds about 8 bytes per file to the storage requirements.
It should not affect performance except possibly with applications
which rely on block-aligned file io for performance.
The default here is Yes.
Any response that does not begin with 'n' will mean Yes: <enter>

External chained IV disabled, as both 'IV chaining'
and 'unique IV' features are required for this option.
Enable block authentication code headers
on every block in a file?  This adds about 12 bytes per block
to the storage requirements for a file, and significantly affects
performance but it also means [almost] any modifications or errors
within a block will be caught and will cause a read error.
The default here is No.
Any response that does not begin with 'y' will mean No: <enter>


Add random bytes to each block header?
This adds a performance penalty, but ensures that blocks
have different authentication codes.  Note that you can
have the same benefits by enabling per-file initialization
vectors, which does not come with as great of performance
penalty. 
Select a number of bytes, from 0 (no random bytes) to 8: 0

NOTE: Per-file initialization vectors were enabled so set this to 0 (no random
      bytes) to disable.

Enable file-hole pass-through?
This avoids writing encrypted blocks when file holes are created.
The default here is Yes.
Any response that does not begin with 'n' will mean Yes: <enter>

NOTE: Accepted defaults but not certain what this does.

Configuration finished.  The filesystem to be created has
the following properties:
Filesystem cipher: "ssl/aes", version 3:0:2
Filename encoding: "nameio/block", version 3:0:1
Key Size: 256 bits
Block Size: 1024 bytes
Each file contains 8 byte header with unique IV data.
File holes passed through to ciphertext.

Now you will need to enter a password for your filesystem.
You will need to remember this password, as there is absolutely
no recovery mechanism.  However, the password can be changed
later using encfsctl.

New Encfs Password: The Covoluted usual
New Encfs Password: 
Verify Encfs Password: 
malachite:~$

10. Mount encrypted filesystem:
malachite:~$ encfs /usr/local/encrypted/ /home/marcilr/decrypted/
EncFS Password: 
malachite:~$

11. Unmount the encrypted filesystem:
$ fusermount -u /home/marcilr/decrypted/


Filename Encoding
=================
New in 1.1. A choice is given between stream encoding of filename and block
encoding.  The advantage of stream encoding is that the encoded filenames will
be as short as possible.  If you have a filename with a single letter, it will
be very short in the encoded form, where as block encoded filenames are always
rounded up to the block size of the encryption cipher (8 bytes for
Blowfish and 16 bytes for AES ).

The advantage of block encoding mode is that filename lenths all come out as a
multiple of the cipher block size.  This means that someone looking at your
encrypted data can't tell as much about the length of your filenames.  It is
on by default, as it takes a similar amount of time to using the stream cipher.
However stream cipher mode may be useful if you want shorter encrypted
filenames for some reason.

Prior to version 1.1, only stream encoding was supported. 


Filename Initialization Vector Chaining
=======================================
New in 1.1.  In previous versions of EncFS, each filename element in a path
was encoded separately.  So if "foo" encoded to " XXX ", then it would always
encode that way (given the same encryption key), no matter if the path was
"a/b/foo", or "aa/foo/cc", etc. That meant it was possible for someone looking
at the encrypted data to see if two files in different directories had the same
name, even though they wouldn't know what that name decoded to.

With initialization vector chaining, each directory gets its own
initialization vector.  So "a/foo" and "b/foo" will have completely different
encoded names for "foo".  This features has almost no performance impact (for
most operations), and so is the default in all modes.

Note: One significant performance exception is directory renames.  Since the
initialization vector for filename encoding depends on the directory path, any
rename requires re-encoding every filename in the tree of the directory being
changed. If there are thousands of files, then EncFS will have to do thousands
of renames.  It may also be possible that EncFS will come across a file that
it can't decode or doesn't have permission to move during the rename operation,
in which case it will attempt to undo any changes it made up to that point and
the rename will fail. 


Per-File Initialization Vectors
===============================
New in 1.1. In previous versions of EncFS, each file was encoded in the same
way.  Each block in a file has always had its own initialization vector, but
in a deterministic way so that block N in one file is encoded in the same was
as block N in another file.  That made it possible for someone to tell if two
files were identical (or parts of the file were identical) by comparing the
encoded data.

With per-file initialization vectors, each file gets its own 64bit random
initialization vector, so that each file is encrypted in a different way.

This option is enabled by default. 


External IV Chaining
====================
New in 1.1.3.  This option is closely related to Per-File Initialization
Vectors and Filename Initialization Vector Chaining. Basically it extends the
initialization vector chaining from filenames to the per-file initialization
vector.

When this option is enabled, the per-file initialization vector is encoded
using the initialization vector derived from the filename initialization
vector chaining code.  This means that the data in a file becomes tied to the
filename.  If an encrypted file is renamed outside of encfs, it will no longer
be decodable within encfs.  Note that unless Block MAC headers are enabled,
the decoding error will not be detected and will result in reading random
looking data.

There is a cost associated with this.  When External IV Chaining is enabled,
hard links will not be allowed within the filesystem, as there would be no way
to properly decode two different filenames pointing to the same data.

Also, renaming a file requires modifying the file header. So renames will only
be allowed when the user has write access to the file.

Because of these limits, this option is disabled by default for standard mode
(and enabled by default for paranoia mode). 


linux.die.net/man/1/encfs


Links
=====
encfs(1) - Linux man page
http://linux.die.net/man/1/encfs
